
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'STRING':([9,11,12,13,14,16,19,21,22,23,25,26,31,34,35,36,37,38,39,40,41,42,47,48,49,50,51,53,54,55,57,],[11,-28,-27,11,-26,-9,-8,11,11,11,11,11,-13,11,-30,11,-21,11,11,11,11,-11,-12,-23,-29,-20,-25,-24,-22,-10,-19,]),'OUTPUT':([15,],[20,]),'$end':([1,2,4,6,7,8,18,28,],[-1,-4,0,-5,-3,-2,-7,-6,]),'LBRACE':([0,1,2,6,7,8,18,28,],[3,3,-4,-5,-3,-2,-7,-6,]),'NUMBER':([9,11,12,13,14,16,19,21,22,23,25,26,31,34,35,36,37,38,39,40,41,42,47,48,49,50,51,53,54,55,57,],[12,-28,-27,12,-26,-9,-8,12,12,12,12,12,-13,12,-30,12,-21,12,12,12,12,-11,-12,-23,-29,-20,-25,-24,-22,-10,-19,]),'ID':([3,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[9,14,17,-28,-27,14,-26,22,-9,-8,30,14,14,14,39,14,14,30,-15,-17,-13,44,30,14,-30,14,-21,14,14,14,14,-11,30,-18,56,-14,-12,-23,-29,-20,-25,-24,-22,-10,-19,-16,]),'RPAREN':([11,12,14,17,20,22,27,29,30,31,33,34,35,36,37,38,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,31,37,42,-15,-17,-13,47,48,-30,50,-21,51,53,54,-11,55,-14,-12,-23,-29,-20,-25,57,-24,-22,-10,58,-19,-16,]),'LPAREN':([0,1,2,6,7,8,9,11,12,13,14,16,18,19,20,21,22,23,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,53,54,55,57,58,],[5,5,-4,-5,-3,-2,15,-28,-27,15,-26,-9,-7,-8,32,15,15,15,15,15,32,-6,-15,-17,-13,32,15,-30,15,-21,15,15,15,15,-11,32,-14,-12,-23,-29,-20,-25,-24,-22,-10,-19,-16,]),'IMPORT':([5,],[10,]),'RBRACE':([11,12,13,14,16,19,31,37,42,47,48,50,51,53,54,55,57,],[-28,-27,18,-26,-9,-8,-13,-21,-11,-12,-23,-20,-25,-24,-22,-10,-19,]),'OP_DIV':([15,],[23,]),'ASSIGN':([15,],[24,]),'OP_MUL':([15,],[25,]),'INPUT':([15,],[27,]),'OP_ADD':([15,],[26,]),'OP_SUB':([15,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([20,27,33,43,],[29,29,46,46,]),'statement_list':([0,],[1,]),'parameter_list':([21,22,23,25,26,],[34,36,38,40,41,]),'import_statement':([0,1,],[2,7,]),'type':([32,],[45,]),'program':([0,],[4,]),'expression_list':([9,],[13,]),'expression':([9,13,21,22,23,25,26,34,36,38,39,40,41,],[16,19,35,35,35,35,35,49,49,49,52,49,49,]),'component':([0,1,],[6,8,]),'declaration_list':([20,27,],[33,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',73),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',74),
  ('type -> ID','type',1,'p_type','parser.py',82),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',87),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',93),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',102),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',107),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',112),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',117),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',122),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',127),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',132),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',137),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',138),
]
