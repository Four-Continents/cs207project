
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'OP_DIV':([12,],[19,]),'INPUT':([12,],[20,]),'LPAREN':([0,3,4,6,8,9,10,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,54,55,57,58,],[1,-4,1,-5,-3,-2,12,-27,-28,12,-9,-26,-6,12,31,31,12,12,12,12,-7,-8,12,-30,-11,31,-17,-15,-13,31,12,12,12,12,12,-21,-29,-25,-10,-14,-12,-23,-24,-22,-20,-19,-16,]),'OUTPUT':([12,],[21,]),'NUMBER':([10,13,14,15,16,17,19,22,23,25,26,28,29,30,32,36,38,39,40,41,42,43,44,45,48,50,51,52,54,55,57,],[13,-27,-28,13,-9,-26,13,13,13,13,13,-8,13,-30,-11,-13,13,13,13,13,13,-21,-29,-25,-10,-12,-23,-24,-22,-20,-19,]),'OP_SUB':([12,],[22,]),'LBRACE':([0,3,4,6,8,9,18,27,],[5,-4,5,-5,-3,-2,-6,-7,]),'STRING':([10,13,14,15,16,17,19,22,23,25,26,28,29,30,32,36,38,39,40,41,42,43,44,45,48,50,51,52,54,55,57,],[14,-27,-28,14,-9,-26,14,14,14,14,14,-8,14,-30,-11,-13,14,14,14,14,14,-21,-29,-25,-10,-12,-23,-24,-22,-20,-19,]),'OP_MUL':([12,],[23,]),'IMPORT':([1,],[7,]),'ASSIGN':([12,],[24,]),'OP_ADD':([12,],[25,]),'RPAREN':([11,13,14,17,20,21,26,29,30,32,33,34,35,36,37,38,39,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-27,-28,-26,32,36,43,45,-30,-11,48,-17,-15,-13,50,51,52,54,55,-21,-29,-25,-10,-14,-12,-23,-24,57,-22,-20,58,-19,-16,]),'ID':([5,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[10,11,17,26,-27,-28,17,-9,-26,17,34,34,17,17,40,17,17,-8,17,-30,47,-11,34,-17,-15,-13,34,17,17,17,17,17,-21,-29,-25,56,-18,-10,-14,-12,-23,-24,-22,-20,-19,-16,]),'RBRACE':([13,14,15,16,17,28,32,36,43,45,48,50,51,52,54,55,57,],[-27,-28,27,-9,-26,-8,-11,-13,-21,-25,-10,-12,-23,-24,-22,-20,-19,]),'$end':([2,3,4,6,8,9,18,27,],[0,-4,-1,-5,-3,-2,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([31,],[46,]),'declaration':([20,21,33,37,],[35,35,49,49,]),'program':([0,],[2,]),'import_statement':([0,4,],[3,8,]),'statement_list':([0,],[4,]),'declaration_list':([20,21,],[33,37,]),'parameter_list':([19,22,23,25,26,],[29,38,39,41,42,]),'component':([0,4,],[6,9,]),'expression_list':([10,],[15,]),'expression':([10,15,19,22,23,25,26,29,38,39,40,41,42,],[16,28,30,30,30,30,30,44,44,44,53,44,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',75),
  ('type -> ID','type',1,'p_type','parser.py',83),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',88),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',95),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',103),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',108),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',113),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',118),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',128),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',133),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',138),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',139),
]
