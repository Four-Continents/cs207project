
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'OP_MUL':([14,],[18,]),'IMPORT':([4,],[10,]),'LBRACE':([0,1,3,6,8,9,27,28,],[2,-5,2,-4,-2,-3,-7,-6,]),'OP_ADD':([14,],[20,]),'STRING':([7,11,12,13,15,16,18,19,20,21,25,26,29,30,31,32,33,36,39,40,42,43,44,45,46,47,48,52,54,55,57,],[12,-9,-28,-27,12,-26,12,12,12,12,12,-8,-30,12,12,12,12,-13,12,-11,12,-21,-29,-24,-25,-22,-23,-12,-10,-20,-19,]),'RPAREN':([12,13,16,17,22,24,25,29,30,31,32,33,35,36,37,38,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,36,40,43,-30,45,46,47,48,-15,-13,52,-17,-11,54,55,-21,-29,-24,-25,-22,-23,-14,-12,57,-10,-20,58,-19,-16,]),'RBRACE':([11,12,13,15,16,26,36,40,43,45,46,47,48,52,54,55,57,],[-9,-28,-27,27,-26,-8,-13,-11,-21,-24,-25,-22,-23,-12,-10,-20,-19,]),'OP_SUB':([14,],[21,]),'OP_DIV':([14,],[19,]),'OUTPUT':([14,],[22,]),'ID':([2,7,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[7,16,17,-9,-28,-27,25,16,-26,16,16,16,16,38,39,38,16,-8,-30,16,16,16,16,50,-15,-13,38,-17,16,-11,38,16,-21,-29,-24,-25,-22,-23,56,-18,-14,-12,-10,-20,-19,-16,]),'$end':([1,3,5,6,8,9,27,28,],[-5,-1,0,-4,-2,-3,-7,-6,]),'LPAREN':([0,1,3,6,7,8,9,11,12,13,15,16,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,54,55,57,58,],[4,-5,4,-4,14,-2,-3,-9,-28,-27,14,-26,14,14,14,14,34,34,14,-8,-7,-6,-30,14,14,14,14,-15,-13,34,-17,14,-11,34,14,-21,-29,-24,-25,-22,-23,-14,-12,-10,-20,-19,-16,]),'INPUT':([14,],[24,]),'NUMBER':([7,11,12,13,15,16,18,19,20,21,25,26,29,30,31,32,33,36,39,40,42,43,44,45,46,47,48,52,54,55,57,],[13,-9,-28,-27,13,-26,13,13,13,13,13,-8,-30,13,13,13,13,-13,13,-11,13,-21,-29,-24,-25,-22,-23,-12,-10,-20,-19,]),'ASSIGN':([14,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([7,15,18,19,20,21,25,30,31,32,33,39,42,],[11,26,29,29,29,29,29,44,44,44,44,53,44,]),'component':([0,3,],[1,8,]),'statement_list':([0,],[3,]),'declaration':([22,24,37,41,],[35,35,51,51,]),'parameter_list':([18,19,20,21,25,],[30,31,32,33,42,]),'type':([34,],[49,]),'declaration_list':([22,24,],[37,41,]),'expression_list':([7,],[15,]),'program':([0,],[5,]),'import_statement':([0,3,],[6,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',75),
  ('type -> ID','type',1,'p_type','parser.py',83),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',88),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',95),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',103),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',108),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',113),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',118),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',128),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',133),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',138),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',139),
]
