
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'STRING':([10,12,13,14,16,17,19,21,23,24,27,28,29,30,31,32,33,38,40,41,42,43,44,45,47,48,52,53,54,55,56,],[12,-28,12,-9,-26,-27,-8,12,12,12,12,12,-30,12,12,12,12,-13,-11,12,-21,12,-24,-29,-25,-23,-12,-10,-22,-20,-19,]),'OP_MUL':([15,],[21,]),'LPAREN':([0,1,2,5,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,58,],[3,-5,-4,3,-2,-3,15,-28,15,-9,-26,-27,-6,-8,-7,15,15,15,34,34,15,15,-30,15,15,15,15,-17,-15,34,-13,34,-11,15,-21,15,-24,-29,-25,-23,-14,-12,-10,-22,-20,-19,-16,]),'$end':([1,2,4,5,8,9,18,20,],[-5,-4,0,-1,-2,-3,-6,-7,]),'ASSIGN':([15,],[22,]),'LBRACE':([0,1,2,5,8,9,18,20,],[6,-5,-4,6,-2,-3,-6,-7,]),'IMPORT':([3,],[7,]),'OP_DIV':([15,],[23,]),'RPAREN':([11,12,16,17,25,26,28,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[18,-28,-26,-27,38,40,42,-30,44,47,48,-17,-15,52,-13,53,-11,54,-21,55,-24,-29,56,-25,-23,-14,-12,-10,-22,-20,-19,58,-16,]),'OP_SUB':([15,],[24,]),'OUTPUT':([15,],[25,]),'INPUT':([15,],[26,]),'NUMBER':([10,12,13,14,16,17,19,21,23,24,27,28,29,30,31,32,33,38,40,41,42,43,44,45,47,48,52,53,54,55,56,],[17,-28,17,-9,-26,-27,-8,17,17,17,17,17,-30,17,17,17,17,-13,-11,17,-21,17,-24,-29,-25,-23,-12,-10,-22,-20,-19,]),'OP_ADD':([15,],[27,]),'ID':([6,7,10,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,],[10,11,16,-28,16,-9,28,-26,-27,-8,16,31,16,16,35,35,16,16,-30,16,16,16,16,50,-17,-15,35,-13,35,-11,16,-21,16,-24,-29,-25,-23,57,-18,-14,-12,-10,-22,-20,-19,-16,]),'RBRACE':([12,13,14,16,17,19,38,40,42,44,47,48,52,53,54,55,56,],[-28,20,-9,-26,-27,-8,-13,-11,-21,-24,-25,-23,-12,-10,-22,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,5,],[1,8,]),'type':([34,],[49,]),'expression':([10,13,21,23,24,27,28,30,31,32,33,41,43,],[14,19,29,29,29,29,29,45,46,45,45,45,45,]),'expression_list':([10,],[13,]),'import_statement':([0,5,],[2,9,]),'program':([0,],[4,]),'statement_list':([0,],[5,]),'declaration':([25,26,37,39,],[36,36,51,51,]),'declaration_list':([25,26,],[37,39,]),'parameter_list':([21,23,24,27,28,],[30,32,33,41,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',75),
  ('type -> ID','type',1,'p_type','parser.py',83),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',88),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',95),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',103),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',108),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',113),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',118),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',128),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',133),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',138),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',139),
]
