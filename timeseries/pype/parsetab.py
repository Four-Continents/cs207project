
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '371EF72B57DF7D01BB0A145AD73D5ADC'
    
_lr_action_items = {'LBRACE':([0,1,4,5,7,8,18,28,],[6,6,-4,-5,-3,-2,-6,-7,]),'OUTPUT':([12,],[24,]),'LPAREN':([0,1,4,5,7,8,10,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,57,58,],[3,3,-4,-5,-3,-2,12,-9,-28,-26,12,-27,-6,12,35,12,12,12,35,12,-8,-7,-21,-30,12,-15,-17,-11,35,12,12,12,35,-13,12,12,-20,-29,-14,-10,-24,-22,-25,-12,-23,-19,-16,]),'INPUT':([12,],[20,]),'OP_SUB':([12,],[25,]),'OP_MUL':([12,],[21,]),'STRING':([10,13,14,15,16,17,19,21,22,23,25,27,29,30,31,34,37,38,39,41,42,43,44,45,49,50,51,52,53,54,57,],[14,-9,-28,-26,14,-27,14,14,14,14,14,-8,-21,-30,14,-11,14,14,14,-13,14,14,-20,-29,-10,-24,-22,-25,-12,-23,-19,]),'ID':([6,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[10,11,15,19,-9,-28,-26,15,-27,15,33,15,15,15,33,15,43,-8,-21,-30,15,-15,-17,-11,47,33,15,15,15,33,-13,15,15,-20,-29,56,-18,-14,-10,-24,-22,-25,-12,-23,-19,-16,]),'OP_ADD':([12,],[22,]),'OP_DIV':([12,],[23,]),'IMPORT':([3,],[9,]),'$end':([1,2,4,5,7,8,18,28,],[-1,0,-4,-5,-3,-2,-6,-7,]),'ASSIGN':([12,],[26,]),'NUMBER':([10,13,14,15,16,17,19,21,22,23,25,27,29,30,31,34,37,38,39,41,42,43,44,45,49,50,51,52,53,54,57,],[17,-9,-28,-26,17,-27,17,17,17,17,17,-8,-21,-30,17,-11,17,17,17,-13,17,17,-20,-29,-10,-24,-22,-25,-12,-23,-19,]),'RPAREN':([11,14,15,17,19,20,24,29,30,31,32,33,34,36,37,38,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-28,-26,-27,29,34,41,-21,-30,44,-15,-17,-11,49,50,51,52,53,-13,54,-20,-29,-14,-10,-24,-22,-25,-12,-23,57,58,-19,-16,]),'RBRACE':([13,14,15,16,17,27,29,34,41,44,49,50,51,52,53,54,57,],[-9,-28,-26,28,-27,-8,-21,-11,-13,-20,-10,-24,-22,-25,-12,-23,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'declaration':([20,24,36,40,],[32,32,48,48,]),'parameter_list':([19,21,22,23,25,],[31,37,38,39,42,]),'program':([0,],[2,]),'import_statement':([0,1,],[4,7,]),'expression':([10,16,19,21,22,23,25,31,37,38,39,42,43,],[13,27,30,30,30,30,30,45,45,45,45,45,55,]),'component':([0,1,],[5,8,]),'declaration_list':([20,24,],[36,40,]),'type':([35,],[46,]),'expression_list':([10,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',73),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',74),
  ('type -> ID','type',1,'p_type','parser.py',82),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',87),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',93),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',102),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',107),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',112),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',117),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',122),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',127),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',132),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',137),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',138),
]
