
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'OP_SUB':([13,],[19,]),'OP_MUL':([13,],[20,]),'LPAREN':([0,1,4,5,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,55,57,58,],[2,-5,2,-4,-2,-3,13,-28,-26,-27,-9,13,-6,13,13,33,33,13,13,13,-8,-7,13,-30,13,33,-11,-15,-17,33,-13,13,-21,13,13,13,-23,-29,-24,-10,-14,-12,-20,-25,-22,-19,-16,]),'ID':([6,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[10,11,14,-28,23,-26,-27,-9,14,14,14,36,36,14,14,42,14,-8,14,-30,14,36,50,-11,-15,-17,36,-13,14,-21,14,14,14,-23,-29,-24,-10,-14,56,-18,-12,-20,-25,-22,-19,-16,]),'STRING':([10,12,14,15,16,17,19,20,23,24,26,27,29,30,31,34,38,39,40,41,42,43,44,45,46,47,51,52,53,55,57,],[12,-28,-26,-27,-9,12,12,12,12,12,12,-8,12,-30,12,-11,-13,12,-21,12,12,12,-23,-29,-24,-10,-12,-20,-25,-22,-19,]),'RPAREN':([11,12,14,15,21,22,23,29,30,31,32,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[18,-28,-26,-27,34,38,40,44,-30,46,47,-11,-15,-17,51,-13,52,-21,53,55,-23,-29,-24,-10,-14,-12,-20,-25,57,-22,58,-19,-16,]),'RBRACE':([12,14,15,16,17,27,34,38,40,44,46,47,51,52,53,55,57,],[-28,-26,-27,-9,28,-8,-11,-13,-21,-23,-24,-10,-12,-20,-25,-22,-19,]),'OUTPUT':([13,],[22,]),'OP_DIV':([13,],[24,]),'IMPORT':([2,],[7,]),'NUMBER':([10,12,14,15,16,17,19,20,23,24,26,27,29,30,31,34,38,39,40,41,42,43,44,45,46,47,51,52,53,55,57,],[15,-28,-26,-27,-9,15,15,15,15,15,15,-8,15,-30,15,-11,-13,15,-21,15,15,15,-23,-29,-24,-10,-12,-20,-25,-22,-19,]),'INPUT':([13,],[21,]),'ASSIGN':([13,],[25,]),'LBRACE':([0,1,4,5,8,9,18,28,],[6,-5,6,-4,-2,-3,-6,-7,]),'$end':([1,3,4,5,8,9,18,28,],[-5,0,-1,-4,-2,-3,-6,-7,]),'OP_ADD':([13,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([21,22,],[32,37,]),'component':([0,4,],[1,8,]),'parameter_list':([19,20,23,24,26,],[29,31,39,41,43,]),'type':([33,],[49,]),'program':([0,],[3,]),'statement_list':([0,],[4,]),'expression':([10,17,19,20,23,24,26,29,31,39,41,42,43,],[16,27,30,30,30,30,30,45,45,45,45,54,45,]),'import_statement':([0,4,],[5,9,]),'declaration':([21,22,32,37,],[35,35,48,48,]),'expression_list':([10,],[17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',75),
  ('type -> ID','type',1,'p_type','parser.py',83),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',88),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',95),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',103),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',108),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',113),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',118),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',128),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',133),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',138),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',139),
]
