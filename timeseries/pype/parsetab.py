
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'ASSIGN':([12,],[22,]),'OUTPUT':([12,],[19,]),'RBRACE':([13,14,15,16,17,27,33,40,42,45,49,50,52,53,54,55,57,],[28,-26,-28,-9,-27,-8,-13,-21,-11,-12,-25,-24,-22,-20,-10,-23,-19,]),'OP_DIV':([12,],[20,]),'LPAREN':([0,1,2,3,7,8,10,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,52,53,54,55,57,58,],[4,-5,-4,4,-2,-3,12,12,-26,-28,-9,-27,-6,32,12,12,12,12,32,12,-8,-7,-15,32,-17,-13,12,-30,12,12,12,12,-21,32,-11,12,-14,-12,-29,-25,-24,-22,-20,-10,-23,-19,-16,]),'STRING':([10,13,14,15,16,17,20,21,23,24,26,27,33,34,35,36,37,38,39,40,42,43,45,48,49,50,52,53,54,55,57,],[15,15,-26,-28,-9,-27,15,15,15,15,15,-8,-13,15,-30,15,15,15,15,-21,-11,15,-12,-29,-25,-24,-22,-20,-10,-23,-19,]),'OP_MUL':([12,],[21,]),'$end':([1,2,3,5,7,8,18,28,],[-5,-4,-1,0,-2,-3,-6,-7,]),'ID':([6,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[10,11,14,24,14,-26,-28,-9,-27,31,14,14,37,14,14,31,14,-8,-15,31,-17,47,-13,14,-30,14,14,14,14,-21,31,-11,14,-14,-12,56,-18,-29,-25,-24,-22,-20,-10,-23,-19,-16,]),'INPUT':([12,],[25,]),'IMPORT':([4,],[9,]),'OP_ADD':([12,],[23,]),'OP_SUB':([12,],[26,]),'LBRACE':([0,1,2,3,7,8,18,28,],[6,-5,-4,6,-2,-3,-6,-7,]),'RPAREN':([11,14,15,17,19,24,25,29,30,31,33,34,35,36,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-26,-28,-27,33,40,42,-15,45,-17,-13,49,-30,50,52,53,-21,54,-11,55,-14,-12,-29,-25,-24,57,-22,-20,-10,-23,58,-19,-16,]),'NUMBER':([10,13,14,15,16,17,20,21,23,24,26,27,33,34,35,36,37,38,39,40,42,43,45,48,49,50,52,53,54,55,57,],[17,17,-26,-28,-9,-27,17,17,17,17,17,-8,-13,17,-30,17,17,17,17,-21,-11,17,-12,-29,-25,-24,-22,-20,-10,-23,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([32,],[46,]),'component':([0,3,],[1,7,]),'parameter_list':([20,21,23,24,26,],[34,36,38,39,43,]),'import_statement':([0,3,],[2,8,]),'statement_list':([0,],[3,]),'expression':([10,13,20,21,23,24,26,34,36,37,38,39,43,],[16,27,35,35,35,35,35,48,48,51,48,48,48,]),'program':([0,],[5,]),'declaration':([19,25,30,41,],[29,29,44,44,]),'declaration_list':([19,25,],[30,41,]),'expression_list':([10,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',74),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',75),
  ('type -> ID','type',1,'p_type','parser.py',83),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',88),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',95),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',103),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',108),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',113),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',118),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',128),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',133),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',138),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',139),
]
