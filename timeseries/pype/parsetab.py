
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'LBRACE':([0,1,2,6,7,8,26,28,],[3,-5,3,-4,-2,-3,-7,-6,]),'NUMBER':([9,12,13,14,15,16,18,21,22,23,25,27,29,30,31,34,37,38,39,40,42,43,44,45,47,51,52,53,54,55,57,],[15,15,-9,-26,-27,-28,15,15,15,15,15,-8,-21,-30,15,-13,15,15,15,15,-11,15,-20,-29,-12,-22,-23,-24,-10,-25,-19,]),'LPAREN':([0,1,2,6,7,8,9,12,13,14,15,16,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,57,58,],[4,-5,4,-4,-2,-3,11,11,-9,-26,-27,-28,11,36,11,11,11,36,11,-7,-8,-6,-21,-30,11,36,-15,-13,-17,11,11,11,11,36,-11,11,-20,-29,-14,-12,-22,-23,-24,-10,-25,-19,-16,]),'RBRACE':([12,13,14,15,16,27,29,34,42,44,47,51,52,53,54,55,57,],[26,-9,-26,-27,-28,-8,-21,-13,-11,-20,-12,-22,-23,-24,-10,-25,-19,]),'RPAREN':([14,15,16,17,18,19,24,29,30,31,32,33,34,35,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-26,-27,-28,28,29,34,42,-21,-30,44,47,-15,-13,-17,51,52,53,54,-11,55,-20,-29,-14,-12,57,-22,-23,-24,-10,-25,58,-19,-16,]),'ID':([3,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,57,58,],[9,14,17,18,14,-9,-26,-27,-28,14,35,37,14,14,14,35,14,-8,-21,-30,14,35,-15,-13,-17,48,14,14,14,14,35,-11,14,-20,-29,-14,-12,-18,56,-22,-23,-24,-10,-25,-19,-16,]),'STRING':([9,12,13,14,15,16,18,21,22,23,25,27,29,30,31,34,37,38,39,40,42,43,44,45,47,51,52,53,54,55,57,],[16,16,-9,-26,-27,-28,16,16,16,16,16,-8,-21,-30,16,-13,16,16,16,16,-11,16,-20,-29,-12,-22,-23,-24,-10,-25,-19,]),'ASSIGN':([11,],[20,]),'OP_ADD':([11,],[21,]),'OP_SUB':([11,],[22,]),'OP_MUL':([11,],[23,]),'IMPORT':([4,],[10,]),'INPUT':([11,],[24,]),'$end':([1,2,5,6,7,8,26,28,],[-5,-1,0,-4,-2,-3,-7,-6,]),'OP_DIV':([11,],[25,]),'OUTPUT':([11,],[19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,2,],[1,7,]),'type':([36,],[49,]),'declaration_list':([19,24,],[32,41,]),'declaration':([19,24,32,41,],[33,33,46,46,]),'expression_list':([9,],[12,]),'expression':([9,12,18,21,22,23,25,31,37,38,39,40,43,],[13,27,30,30,30,30,30,45,50,45,45,45,45,]),'statement_list':([0,],[2,]),'program':([0,],[5,]),'parameter_list':([18,21,22,23,25,],[31,38,39,40,43,]),'import_statement':([0,2,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',17),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',36),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',37),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',46),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',47),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',55),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',56),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',64),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',65),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',73),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',74),
  ('type -> ID','type',1,'p_type','parser.py',82),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',87),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_eval','parser.py',93),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_eval','parser.py',94),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_expression_add','parser.py',102),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_expression_subtract','parser.py',107),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_expression_mult','parser.py',112),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_expression_div','parser.py',117),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',122),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',127),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',132),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_params_list','parser.py',137),
  ('parameter_list -> expression','parameter_list',1,'p_params_list','parser.py',138),
]
